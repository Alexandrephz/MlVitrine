// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MlVitrine.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MlVitrine.Migrations
{
    [DbContext(typeof(MlVitrineContext))]
    [Migration("20220803202539_Products")]
    partial class Products
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MlVitrine.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("brand_name")
                        .HasColumnType("text");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("MlVitrine.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductSpecId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("product_active")
                        .HasColumnType("boolean");

                    b.Property<string>("product_description")
                        .HasColumnType("text");

                    b.Property<int>("product_ean")
                        .HasColumnType("integer");

                    b.Property<string>("product_mainimage")
                        .HasColumnType("text");

                    b.Property<string>("product_model")
                        .HasColumnType("text");

                    b.Property<string>("product_name")
                        .HasColumnType("text");

                    b.Property<decimal>("product_price")
                        .HasColumnType("numeric");

                    b.Property<string>("product_sku")
                        .HasColumnType("text");

                    b.Property<int?>("product_stock")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductConditionId");

                    b.HasIndex("ProductSpecId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("category_name")
                        .HasColumnType("text");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductCompatibility", b =>
                {
                    b.Property<int>("ProductCompatibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductCompatibilityId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ProductCompatibilityId");

                    b.ToTable("ProductCompatibility");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductCondition", b =>
                {
                    b.Property<int>("ProductConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductConditionId"));

                    b.Property<string>("product_condition")
                        .HasColumnType("text");

                    b.HasKey("ProductConditionId");

                    b.ToTable("ProductCondition");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductImageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("image_url")
                        .HasColumnType("text");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductPriceHistory", b =>
                {
                    b.Property<int>("ProductPriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductPriceHistoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("product_price")
                        .HasColumnType("numeric");

                    b.Property<int>("productid_price")
                        .HasColumnType("integer");

                    b.HasKey("ProductPriceHistoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductSpec", b =>
                {
                    b.Property<int>("ProductSpecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductSpecId"));

                    b.Property<string>("product_attribute")
                        .HasColumnType("text");

                    b.HasKey("ProductSpecId");

                    b.ToTable("ProductSpec");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductStockHistory", b =>
                {
                    b.Property<int>("ProductStockHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductStockHistoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("product_stock")
                        .HasColumnType("integer");

                    b.HasKey("ProductStockHistoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductWorkWith", b =>
                {
                    b.Property<int>("ProductWorkWithId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductWorkWithId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductWorkWith_Brand")
                        .HasColumnType("text");

                    b.HasKey("ProductWorkWithId");

                    b.ToTable("ProductWorkWith");
                });

            modelBuilder.Entity("MlVitrine.Models.Product", b =>
                {
                    b.HasOne("MlVitrine.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MlVitrine.Models.ProductCondition", "ProductCondition")
                        .WithMany()
                        .HasForeignKey("ProductConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MlVitrine.Models.ProductSpec", "ProductSpec")
                        .WithMany()
                        .HasForeignKey("ProductSpecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductCondition");

                    b.Navigation("ProductSpec");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductCategory", b =>
                {
                    b.HasOne("MlVitrine.Models.Product", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductImage", b =>
                {
                    b.HasOne("MlVitrine.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("MlVitrine.Models.Product", null)
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("MlVitrine.Models.ProductStockHistory", b =>
                {
                    b.HasOne("MlVitrine.Models.Product", null)
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("MlVitrine.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
